
/*
When sending information to the backend to be stored in the DB, please use the following format:

[MySQL Query, Table Name to be access, Values to be Stored]

EX:
information_block = {
						OPTION: MYSQL COMMAND, 
						CATEGORY:(News, College, City, Definitions),
						USERIP,
						PANELID,
						SEARCHID,
						CONTENT - [This should either be an array for a delaration of classes. Agreed upon by group]
					};

*/

/*Declaring Module dependencies*/

var express	= require('express'),					// used as middleware
	mysql 	= require('mysql'),						// Includes separate files from JS.
	app 	= express(),							// used to define a variable for express
    server 	= require('http').createServer(app), 	// creates the server to be ran
    io 		= require('socket.io').listen(server),	// pulls in socket IO to listen to inputs. The quotations means path way to module to be included. Use npm install -g module name to do a global install. 
	path 	= require('path'),
	sum 	= require('sum'),						// for summarizing the articles
	connect = mysql.createConnection({
		multipleStatements: true,
		host: 		'localhost',					// Hostname for DB, change where appropriate
		port: 		3306,							// Port number for the host, change where necessary
		user: 		'root',							// Username to log into the system, change where appropriate
		password: 	'icesnow',					// Password to log into the DB, Change where appropriate. 
		database: 	'college_ref',						// Database to be interfaced with. 
    }),

/*Decalring Variables*/

    connections 	 = [],							// An array used to  tell the backend how many users are attached
	column_name 	 = {},							// To be used to store the names of the columns later
	obj_key_relation = {};							// An object to be used to find relationships between keys when given an insert. 

	/*This query will be used to determine the relationship between tables, foreigns keys and the dependents.*/
	query_relation 	 = 'SELECT  i1.CONSTRAINT_NAME, i1.TABLE_NAME,i1.COLUMN_NAME, i1.REFERENCED_TABLE_SCHEMA,i1.REFERENCED_TABLE_NAME, i1.REFERENCED_COLUMN_NAME,i2.UPDATE_RULE, i2.DELETE_RULE FROM information_schema.KEY_COLUMN_USAGE AS i1 INNER JOIN information_schema.REFERENTIAL_CONSTRAINTS AS i2 ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME WHERE i1.REFERENCED_TABLE_NAME IS NOT NULL  AND  i1.TABLE_SCHEMA  ='+'\''+'tetradb'+'\'',

	/*
	The below is a variable asynchronous function declared to retrieve the keys of the objects
	generated by the mysql query. This will all the return and retreival of the mysql information to the 
	front end.
	Variable Definitions for function input:
	results: data that will be passed in, a mysql queried object.
	callback: creates a callback function to return the values.
	*/

    key_value = function(results, callback){

		var values 	 = [];							// Temporary value used to store the information in the mysql object to be sent out later.
		var keys	 = [];							// Temporary value used to store key names to be sent to frond end 
		var key_name = Object.keys(results[0]);		// Retrieving the key names by using Object.keys() to locate the keys, 1 element is needed to identify. 
		
		/*Sub-function used to store the keys and values in the object from mysql*/

		key_name.forEach(function(key){
			for (i in results){
				keys[i]   = key;					// Storing the key values
				values[i] = results[i][key];		// Storing the mysql query values
			}
			callback(values, keys);					// A call back function used to return the values
		})
	};


/*test variables*/

var sample = "I don’t know about you, but Lost&nbsp;in Showbiz can’t get enough of anyone with lots of Twitter followers taking their personal struggles with broadband installation/tardy dishwasher delivery/carry-on baggage rules public. However self-effacingly unspoken it is,&nbsp;we know they’re out there for the&nbsp;rest of us, and even as we have to wade through a seemingly endless stream of tweets to which the handle @British_Airways or @VodafoneUK is magisterially appended like it’s the effing Bat-Signal, I think we all emerge the richer for it. They lift us all. My washing machine is because theirs is. One of the great veterans of this type of conflict is Location, Location, Location presenter Kirstie Allsopp, whose Homemade guide to Being A&nbsp;Celebrity Conservative has yet to air, but will presumably eventually be spewed out of the Great Channel 4 Format Flogger. They get around to all&nbsp;of them in the end. In one notable act of heroics, Kirstie deployed her online resources in the war on carry-on liquids. There followed a series of dispatches from the frontline, in which we learned that a transparent but zipped Anya Hindmarch makeup bag was deemed by @British_Airways to be an unsuitable cabin receptacle to encase Kirstie’s lipstick and whatnot. Why? Apparently something to do with zips being outlawed. “I did not complain,” complained Kirstie, “but I was miffed. Like thousands of working mothers, I keep a grab-and-go travel kit&nbsp;and I was shocked this was not viable any more.” Shiiiiiiiiiiiiiiiiiiiiiit! What happened? “I did not have to throw anything away,” she elaborated. “I put my makeup in a&nbsp;free bag, and my own bag in hand luggage.” Still, I hope we can agree it was all an unbelievably close shave. Alas, this week Kirstie has gone on the tweet again, but the reaction has been rather more mixed. The post in question read: “Just saw a guy have a&nbsp;glass of coke, a cappuccino, a croissant and a ham &amp; cheese sandwich for breakfast. #ourNHSistoast #worldgonemad.” Well now. #HaveYouEverHadAHangoverAndHadToGoToWork #ThenAgainWhichOfUsCanReally ExtrapolateAnythingFromAStrangersBreakfast #ExcitedForBakeOffOnC4 A completely nonscientific analysis of the replies to Kirstie’s tweet found a few sympathetic ears, but a lot of people suggesting she was smug and judgmental, or that the person might have just done a bike ride/come off a nightshift where they didn’t get a break/be hypoglycemic. “My point,” shot back Kirstie, “is that if we want a functioning NHS we all need to take a pull.” She added that she hoped it started a “national conversation”. Quite. Maybe those criticising Kirstie are simply unaware of how many of their rights and responsibilities are a direct result of national conversations started by her tweets? I think she should have simply responded to them with a version of Jack Nicholson’s dismissal of Tom Cruise in A Few Good Men: “You don’t want the truth because, deep down in places you don’t talk about at parties, you want me on that timeline, you need me on your timeline. We use words like honour, code, zips, diabetes. We use these words as the backbone of a life spent defending something. You use them as a punchline. I have neither the time nor the inclination to explain myself to a tweeter who rises and sleeps under the blanket of the very freedom that I provide, and then questions the manner in which I provide it. I would rather you just said thank you, and went on your way.” Unfortunately, the reply Kirstie did give didn’t silence the critics, so she doubled down. “We can either take a pull,” she stated, “and accept that what we eat hugely impacts our health and therefore #OurNHS, or we can stick our heads in the sand.” Of course, a small part of me does feel that if Kirstie wanted a more effective impact on the health service, perhaps she could have had a word with her friends David Cameron and George Osborne, at any point during their six years as actual prime minister and chancellor. I know that wasn’t strictly her government remit – though obviously she was put in charge of a housing review – but there is an argument that this would have been smarter than mugging off some member of the public in the latest edition of Allsopp’s Fables. Yet that would be me forgetting that Kirstie is essentially about small government. During one Today programme appearance, she was asked whether planning laws should be used to stop some villages becoming second-home ghost towns, and responded angrily in the negative, declaring: “Communities have to save themselves.” (Yes. Take a pull, former mining villages, even if the call centres have gone.) Indeed, having been reminded of that view, I suddenly discern a powerful parallel between the NHS crisis and the housing crisis. As Kirstie reminds us, everything is connected. We are all going to have to take a pull. God knows there are nights we’ve regarded getting unhealthily drunk as the preferable option to watching the endless, soul-destroying parade of property shows on TV, where&nbsp;the focus is always on the properties, as opposed to what you might deem the bigger issue, namely that there AREN’T ANYWHERE NEAR ENOUGH PROPERTIES FOR PEOPLE TO AFFORDABLY LIVE IN. #worldgonemad. So next time you see someone watching Location Location Location, or Relocation Relocation, or any of the other 12 miserable iterations of this stuff, don’t just think it’s none of your business and you aren’t remotely in possession of sufficient facts about why they’re doing it to begin to make a wider point about it. Instead, tell them that it’s an absolutely crappy lifestyle choice – not just for them, but for a nation whose housing supply is patently already at crisis point. It’s just one person’s choice, sure. But it clearly has&nbsp;an impact on wider cultural forces that are creating an ever-growing number of people who aren’t invested in property ownership, who feel increasingly angry and left behind, and are disenfranchised by&nbsp;this country’s repeatedly self-destructive obsession with property prices and endless fixation with getting a bigger kitchen out of the side return. As I say, next time you see someone watching a property show, remember that it is a bit like seeing someone eating a vitamin-free breakfast. You need to remind them that people may like this stuff – they may even find it comforting after a hard day. But it is absolutely no good for them, or the buckling wider community in which we all share, and, consequently, it&nbsp;needs to stop. In short, we all need to take a pull and switch off. It’s what Kirstie would&nbsp;want.";



/**********MAIN BODY OF CODE**************/

server.listen(process.env.PORT || 3000); 		// the server is listening to the port. will listen to any enviroment port what is ther

console.log('Server Runs');

/*Displays the content of index.html when someone connects to the port on the server.*/

app.use('/css', express.static('css')); 		// Defines static file to use for styling of the website when it is requested, along with the directory of choice. 
app.use('/public', express.static('public'));	// Pushes client side javascript to the client. 
app.get('/', function(req, res){
	res.sendFile(__dirname + '/tetra.html');	// Displays server.

});
/*All events to be emitted will be stored in this portion.*/

io.sockets.on('connection', function(socket){
	//Connects socket of enviroment
	connections.push(socket);
	console.log('Connected: %s sockets connected', connections.length);			// Used to tell backend how many people are connected

	//Disconnect socket of enviroment
	socket.on('disconnect', function(data){
		connections.splice(connections.indexOf(socket), 1);						// Splices (removes) the socket that left - decrements array.
		console.log('Disconected: %s sockets connected', connections.length);	// Displays how many have disconnected
	});

	socket.on('send message',function(data){

		/*first part determines if there is a need for the college code to be used in the API. This retrieves the code and state*/
		
		/*If it does not work remove the [0] and just make it data.college in the query and here.*/
		if(typeof(data.college) != 'undefined'){
			
				connect.query('SELECT college_ID,state FROM college_reference_table WHERE college_name=?', data.college, function(err, res){
					if (res.length > 0 || res[0].college == []) {
						socket.emit('new message',{college_id: res[0].college_ID, state: res[0].state});
					}
				});
			
			
		}else if(typeof(data.content) !='undefined'){
			//this area of the branch is meant to summarize and relay the content to the client-side
			var output = sum({'corpus': data.content, 'nSentences': 10});

			socket.emit('new message', {summary: output.summary});

		}else if (typeof(data.admissions) != 'undefined') {
				//this is to pass data from an asynchronous function to collegeSearch function in tetra.html
				socket.emit('new message', data);

		}else{ 

			/*
			information_block will hold all information passed to the back end that will parse itself based off of a ",".
			It is organized as follows:
			*/

			var information_block = interpretInput(data);

			var opts_name = [];

			var vals = [];

			opts_name[0] = information_block.options;
			opts_name[1] = information_block.table;

			vals = information_block.values;

			/*mysql query to find foreign key relationships to know propagation.*/
			connect.query(query_relation,function(err, res){

				obj_key_relation = getForeignKey(res);	// Getting an object that will be used to find key relationshipts for INSERT/UPDATE statements. 
			
				/*The below is used to gather column names, allows the code to be more modular.*/
				connect.query('SHOW COLUMNS FROM ' + opts_name[1], function(err, rows, fields) {

				/*
				Pulls the columns from the desired table. This allows for dynamic insertion and updates to each column.
				This will allow for dynamic queries later, without having to specify column name and table each time. 
				*/
					for (var i in rows){
						column_name[i] = rows[i].Field;
					}
					var query = makeQuery(opts_name[0],opts_name[1],column_name, vals, 4);
			
					/*
					The opts_name[0] should never be UPDATE as that is set by the query function. Only uncommenct if test html is present
					This generates a select query to check values and insertions appropriately. 
					*/

					if (opts_name[0] == 'INSERT'){
						connect.query(query,function(err, results){
							console.log(results);
						});
						query = makeQuery('SELECT', opts_name[1], column_name, vals, 4);
						opts_name[0] = 'SELECT';
					}
				//console.log('ERROR');

					if (opts_name[0] == 'SELECT'){

						connect.query(query,function(err, data){

							key_value(data, function(value, keys){
				
								socket.emit('new message',{msg1:value, msg2:keys});
				
							});
						});
					} 

				});
			});

		//io.sockets.emit('new message', {msg: data});	// This is for broadcasting to all browsers. 
		
		//socket.emit('new message', {msg: data});		// Broadcasts only to the browser that made the query.
		}
	});
});


/*********MAIN BODY OF CODE ENDS****************/

/************SUB-FUNCTIONS BEGIN***************/

/* 
FUNCTION: interpretInput(input)

Variable input is the input from the middleware. 

Description:
Breaks input into an appropriate set-up to start creating the query for the MySQL DB. 
*/

function interpretInput(input){
	/*
	var options_tbName = input.split("-", 2); 		// Creates a split array of the first two elements: MySQL option and table name here.
	var values = input.substr(15,26);				// Getting second half.
	values = values.split(','); */

	
	var cats 			= ['NEWS','DEFINITIONS', 'CITY', 'COLLEGE'],	// Possible categorical options from the headend.
		tables 			= ['article','definition','locality','college']	// The list of possible tables to be used
		options_tbName 	= [],											// Holds the table and option to be used by the system
		values 			= [],											// Holds the values to be inserted.
		keys_input		= [],											// Holds the keys to correlate to the values to be inserted.
		count 			= 0,											// A counter to be used as a separate iterator in a FOR loop.
		object_out		= {},											// object to store and output. 
		tables_guess	= ['headline','word','city','college'];

		keys_input = Object.keys(input[0]);								// Gets the keys
		
	/* Getting mySQL command and table to be used. */

	/*If not option property is sent, it is assumed to be an INSERT statement, otherwise the call will be stored*/
	if(typeof input[0].option == 'undefined'){
		options_tbName[0] = 'INSERT';
	}else{
		options_tbName[0] = input.options;
	}
	
	/*If the categorey is undefined a comparison of properties is done. certian properties are always used, there table can be dermined that way.*/
	if(typeof input[0].category == 'undefined'){
		for(var i in tables_guess){
			for(var j in keys_input){
				if(keys_input[j] == tables_guess[i]){
					options_tbName[1] = 'definition';
				} 
			}
		}
	}else{
		for(var i in cats){
			if(input.category == cats[i]){
				options_tbName[1] = tables[i];
			}
		}
	}

	for(var i in keys_input.length){
		var key = key_input[i];
		val[count] = input[i][key]; 
	}

	
	/*Object string declaring object to be returned.*/
	
	object_out ['option'] 	= options_tbName[0];						// Storing mysql option

	object_out ['table'] 	= options_tbName[1];						// Storing table name
	for (var i in keys_input.length){
			keys = key_input[i];
			object_out[keys] = options;
		}
	console.log(object_out);	
	return object_out;
	

	//return {options_tbName, values};
};

/*
FUNCTION: getForeignKey(results)

Variable results is the results from an initial query to get DB relationships.

Description:
This function is important as during an initial insertion the foreign keys do not get cascaded through.
 It will only update the tables during an UPDATE or DELETE command, as such it is important to determine the
 relationship between each table. That is what this does. 
*/

function getForeignKey(results){
	/*Declaring the variables to be used in this function*/
	var tbName 		= [],						// Used for getting the dependent table names
	    cnName 		= [],						// Used for getting the dependent column names
	    rf_tbName 	= [],						// Used for getting the referenced table names;
	    rf_cnName 	= [],						// Used for getting the referenced column names
	    tb_key 		= '',						// Used to store the key to find the dependent table.
	    cn_key 		= '',						// Used to store the key to find the dependent column.
	    rf_tb_key	= '',						// Used to store the key to find the referenced table name.
	    rf_cn_key	= '',						// Used to store the key to find the referenced column name.
	    key_obj		= {};						// An object used to store the found values.
	    key_name	= Object.keys(results[0]);	// Used to get the list of keys from the object of the SQL query, will stored as an array.
	  
	   /*The loop below is to retrieve the desired key names to be used to retrieve values later.*/
	    for(var i in key_name){

			if (key_name[i] == 'TABLE_NAME'){
				tb_key = key_name[i];
			}else if(key_name[i] == 'COLUMN_NAME'){
				cn_key = key_name[i];
			}else if(key_name[i] == 'REFERENCED_TABLE_NAME'){
				rf_tb_key = key_name[i];
			}else if(key_name[i] == 'REFERENCED_COLUMN_NAME'){
				rf_cn_key = key_name[i];
			}

		}

		/*The below loop is being used to get the names to be used during inseration.*/
		for(var i in results){
			
			tbName[i] 	= results[i][tb_key];		// Retrieving the table name
			cnName[i] 	= results[i][cn_key];		// Retrieving the column name
		 	rf_tbName[i] = results[i][rf_tb_key];	// Retrieving the reference table name
		 	rf_cnName[i] = results[i][rf_cn_key];	// Retrieving the reference column name

		}

		/*Storing the recieved values as an object to be passed back. */
		key_obj = {
			TABLE_NAME : tbName,
			COLUMN_NAME : cnName,
			REFERENCED_TABLE_NAME : rf_tbName,
			REFERENCED_COLUMN_NAME : rf_cnName
		};
		return key_obj;
};

/*
FUNCITON:makeQuery(do_command, table_name, name, value, amount)

Variable do_command is the type of query generated, INSERT or SELECT
Variable table_name is the name of the table to insert. 
Variable name is an array of column names present in the table where the insertion is occuring.
Variable value is an array of values ot be inserted, they correspond 1:1 with the name array.
Variable amount is a value of checking how many searches were performed by an IP, >5 will cause an UPDATE command rather then INSERT.

Description:
	Creates a query to be used later; allows for mysql access, while hiding access to the DB.
	This is function will make the query to store information gathered by the user. It will also SELECT information to send out to the HTML or middleware to be displayed.
*/

function makeQuery(do_command, table_name, name, value, amount){

	var sql_query = '';				// To be used as a function variable. Holds sql command.



	if(do_command == 'INSERT'){

		if(amount >= 5){
			sql_query = 'UPDATE ' + table_name;
		} else if( amount < 5) {
			sql_query = 'INSERT INTO ' + table_name;
		}

		if (sql_query == 'INSERT INTO ' + table_name){

		}

		sql_query = sql_query + ' SET';

		for (var i in name){
			if (i > 0){
				sql_query = sql_query + ',';
			}
				sql_query = sql_query + ' ' + name[i] + '=' + '\''+ value[i] + '\'';
		}


	} else {

		sql_query = 'SELECT ';

		for (var i in name){
			if (i > 0){
				sql_query = sql_query + ',';
			}
				sql_query = sql_query + ' ' + name[i];
			}
			sql_query = sql_query + ' FROM ' + table_name;
		}
	return sql_query;
};

/*
FUNCTION: generateFKQueries(input, reference_input)

Variable input is the output generated by interpretInput function
Variable reference_Input is the output generated by the getForeignKey function

Description:
Generates queries for independent tables. This is important because initial insertion statement does not populate foreign keys, as such they must be inserted. Only cascades upon updates or deletions.
*/

function generateFKQueries(input, reference_input){
	var fk_queries = {},		// Object ot store the queries to populate primary tables where foreign keys are located. 
		sql_query = [],			// initialized to store generated query. 
		fk_rf_table = [],		// to store tables that need to be filled before the  primary queue can be implemented. 
		fk_column_value = [], 	// stores column value of each key. 
		fk_ref_table_2 = [], 	// possible reference tables from fk table
		fk_column_value_2 = [],	// possible reference column from fk column
		count = 0;				// a count used to keep track of a value
	/*Getting the relationship of the input and tables.*/
	for(var i in reference_input.length){ 
		if(input.table == reference_input.TABLE_NAME){
			fk_rf_table[i] = reference_input[i].REFERENCED_TABLE_NAME;	
			fk_column_value[i] = reference_input[i].REFERENCED_COLUMN_NAME;
		}
		if(fk_rf_table[i] == reference_input[i].TABLE_NAME){
			fk_ref_table_2[i] = reference_input[i].REFERENCED_TABLE_NAME;	
			fk_column_value_2[i] = reference_input[i].REFERENCED_COLUMN_NAME;
		}
	}

	connnect.query('SELECT * FROM user WHERE userIp = ?', input.userIp, function(err, results){
		if(results[0].userIp != input[0].userIp){
			connect.query('INSERT INTO userIP SET userIp=?',input.Ip);
			connect.query('INSERT INTO search(searchId,panelId,time_stamp,criteria,category,userIp) VALUES (?,?,?,?,?,?)',[input.searchId,input.panelId,input.time_stamp,input.criteria,input.category,input.userIp]);
			connect.query()
		}else{
			connect.query('INSERT INTO search(searchId,panelId,time_stamp,criteria,category,userIp) VALUES (?,?,?,?,?,?)',[input.searchId,input.panelId,input.time_stamp,input.criteria,input.category,input.userIp]);
		}
	});
	
	return 0;
};

/**********SUB-FUNCTIONS END**************/